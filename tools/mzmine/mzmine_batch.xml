<tool id="mzmine_batch" name="MZMine batch" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="21.05">
    <macros>
        <token name="@TOOL_VERSION@">3.6.0</token>
        <token name="@VERSION_SUFFIX@">0</token>
    </macros>
    <xrefs>
        <xref type="bio.tools">mzmine</xref>
    </xrefs>
    <requirements>
        <requirement type="package" version="@TOOL_VERSION@">mzmine</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
    #import re
    
    mkdir -p input &&
    #for $i in $input
        #set escaped_i = re.sub('[^\s\w\-\.]', '_', str($i.element_identifier))
        ln -s '$i' 'input/$escaped_i'.$i.ext &&
        echo 'input/$escaped_i'.$i.ext >> input.txt &&
    #end for

    #if $libraries
        mkdir -p libraries &&
        #for $l in $libraries
            #set escaped_l = re.sub('[^\s\w\-\.]', '_', str($l.element_identifier))
            ln -s '$l' 'libraries/$escaped_l'.$l.ext &&
            echo 'libraries/$escaped_l'.$l.ext >> libraries.txt &&
        #end for
    #end if

    ## modify output paths in batch XML to relative path
    ## TODO currently all goes to a single output dir one
    ## could use more logic and create multiple outputs
    ## that may be filtered on user demand using a bool/select
    mkdir -p output/ &&
    sed -e 's@<current_file>.*[\\\/]\([^\\\/]\+\)</current_file>@<current_file>./output/\1</current_file>@' '$batch' > batch.xml &&

    mzmine
        --batch 'batch.xml'
        --input 'input.txt'
        #if $libraries
            --libraries 'libraries.txt'
        #end if
## TODO we could think about implementing this parameter by adding an env var that admins could set
##  -m,--memory <arg>      keep objects (scan data, features, etc) in memory.
##                         Options: none, all, features, centroids, raw,
##                         masses_features (masses_features for features and
##                         centroids)
## TODO maybe in the future
##  -p,--pref <arg>        preferences file
        --temp "\${TMPDIR:-\$_GALAXY_JOB_TMP_DIR}"
        --threads \${GALAXY_SLOTS:-1}
## ignored parameters
## -r,--running          keep MZmine running in headless mode
## -tdfpseudoprofile     Loads pseudo-profile frame spectra for tdf files
##                       instead of centroided spectra.
## -tsfprofile           Loads profile spectra from .tsf data instead of
##                       centroid spectra.

    ]]></command>
    <inputs>
        <param argument="--batch" type="data" format="xml" label="MZMine batch file" help="XML batch file (ideally created with version @TOOL_VERSION@)"/>
        <!-- TODO input as collection (default) or multiple data input-->
        <param argument="--input" type="data" format="mzml,mzxml" multiple="true" label="Spectra (mzml)"/>
        <param argument="--libraries" type="data" format="json,mgf" multiple="true" optional="true" label="Spectral libraries"/>
    </inputs>
    <outputs>
        <collection name="output" type="list">
            <discover_datasets pattern="__name_and_ext__" directory="output"/>
        </collection>
        <!-- maybe a distiction in different output types would be better
        <collection name="raw_data" type="list" label="${tool.name} on ${on_string}: raw data">
            <discover_datasets pattern="__name_and_ext__" directory="raw_data"/>
        </collection>
        <collection name="feature_list" type="list" label="${tool.name} on ${on_string}: feature list">
            <discover_datasets pattern="__name_and_ext__" directory="feature_list" />
        </collection> -->
    </outputs>
    <tests>
        <test>
            <param name="batch" value="test_small.xml" ftype="xml"/>
            <param name="input" value="DOM_a.mzML,DOM_b.mzXML"/>
            <param name="libraries" value="GNPS-FAULKNERLEGACY.json" ftype="json"/>
            <output_collection name="output" count="3" type="list">
                <element name="test2_iimn_gnps" ftype="mgf">
                    <assert_contents>
                        <has_n_lines n="2103"/>
                        <has_text text="BEGIN IONS"/>
                    </assert_contents>
                </element>
                <element name="test2_iimn_gnps_quant" ftype="csv">
                    <assert_contents>
                        <has_n_lines n="34"/>
                        <has_n_columns sep="," n="16"/>
                    </assert_contents>
                </element>
                <element name="test2_sirius" ftype="mgf">
                    <assert_contents>
                        <has_n_lines n="54406"/>
                        <has_text text="BEGIN IONS"/>
                    </assert_contents>
                </element>
            </output_collection>
        </test>
    </tests>
    <help><![CDATA[
        MZmine 3 is an open-source software for mass-spectrometry data processing, with the main focus on LC-MS data.

        This Galaxy tool allows to execute MZmine batches. That is you can create MZmine batch (XML) files thatdescribe the parameters of a MZmine analysis using the MZmine GUI
        and use this to execute such an analysis on the Galaxy platform. 

        **Inputs**

        - MZMine batch file in XML format. This file describes the parameters for a MZmine batch analysis. It can be generated with the MZmine GUI (preferentiall with a matching version, i.e. @TOOL_VERSION@).
        - Input spectra in mzml format
        - Spectra libraries in mgf or json format (optional)

    ]]></help>
    <citations>
        <citation type="doi">10.1038/s41587-023-01690-2</citation>
    </citations>
</tool>